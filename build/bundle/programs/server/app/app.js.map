{"version":3,"sources":["meteor://ðŸ’»app/imports/api/Artists.js","meteor://ðŸ’»app/imports/api/State.js","meteor://ðŸ’»app/server/google-oauth.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Artists","Mongo","watch","require","v","Collection","allow","insert","userId","doc","owner","remove","update","fetch","exportDefault","State","settings","Meteor","google","ServiceConfiguration","configurations","service","clientId","secret","Future","default","Accounts","startup","auth","youtube","version","methods","youtubeSearch","term","regionCode","myFuture","search","list","part","q","type","videoSyndicated","err","result","return","data","items","id","videoId","wait","insertRelease","artist","Error","console","log","selector","artistExists","find","count","$push","releases","removeRelease","releaseId","findOne","length","$pull","publish","sort","fields","name","users","_id","onCreateUser","options","user","services","volume","playing","playlist"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const Artists = new Mongo.Collection('artists');\n\nArtists.allow({\n  insert: (userId, doc) => userId === doc.owner,\n  remove: (userId, doc) => userId === doc.owner,\n  update: (userId, doc) => userId === doc.owner,\n  fetch: ['owner'],\n});\n\nexport default Artists;\n","import { Mongo } from 'meteor/mongo';\n\nexport const State = new Mongo.Collection('state');\n\nState.allow({\n  remove: (userId, doc) => userId === doc.owner,\n  update: (userId, doc) => userId === doc.owner,\n  fetch: ['owner'],\n});\n\nexport default State;\n","const settings = Meteor.settings.google;\n\nif (settings) {\n  ServiceConfiguration.configurations.remove({\n    service: 'google'\n  });\n\n  ServiceConfiguration.configurations.insert({\n    service: 'google',\n    clientId: settings.clientId,\n    secret: settings.secret\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport { google } from 'googleapis';\nimport Future from 'fibers/future';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Artists } from '../imports/api/Artists';\nimport { State } from '../imports/api/State';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n\n  const auth = 'AIzaSyC0IOZksTukz8kfTmrB59V90oPCs4l5GPs';\n  const youtube = google.youtube({ version: 'v3', auth });\n\n  Meteor.methods({\n    youtubeSearch: (term, regionCode) => {\n      const myFuture = new Future();\n      youtube.search.list({\n        part: 'id,snippet',\n        q: term,\n        type: 'video',\n        regionCode,\n        videoSyndicated: 'true',\n      }, (err, result) => {\n        myFuture.return(result.data.items[0].id.videoId);\n      });\n      return myFuture.wait();\n    },\n    insertRelease: (artist) => {\n      if (!Meteor.userId()) {\n        throw new Meteor.Error('not-authorized');\n      }\n        console.log('yee')\n      const selector = { owner: Meteor.userId(), '@.id': artist['@'].id };\n      const artistExists = Artists.find(selector).count();\n      if (artistExists) {\n        Artists.update(selector, { $push: { releases: artist.releases[0] } });\n      } else {\n        Artists.insert(artist);\n      }\n    },\n    removeRelease: (releaseId) => {\n      if (!Meteor.userId()) {\n        throw new Meteor.Error('not-authorized');\n      }\n      const selector = { owner: Meteor.userId(), 'releases.@.id': releaseId };\n      const artist = Artists.findOne(selector);\n      if (artist.releases.length === 1) {\n        Artists.remove(selector);\n      } else {\n        Artists.update(selector, { $pull: { releases: { '@.id': releaseId } } });\n      }\n    },\n  });\n});\n\nMeteor.publish('appData', () => [\n  Artists.find({ owner: Meteor.userId() }, {\n    sort: { 'sort-name': 1 },\n    fields: {\n      name: 1,\n      'sort-name': 1,\n      '@.id': 1,\n      'releases.@.id': 1,\n      'releases.title': 1,\n      'releases.cover-art-archive.artwork': 1,\n      'releases.tracks.youtubeId': 1,\n      'releases.tracks.@.id': 1,\n      'releases.tracks.recording.title': 1,\n    },\n  }),\n  State.find({ owner: Meteor.userId() }),\n]);\n\nMeteor.publish('user', () => Meteor.users.find({ _id: Meteor.userId() }));\n\nAccounts.onCreateUser((options, user) => {\n  if (!user.services.google) {\n    throw new Error('Expected login with Google only.');\n  }\n  State.insert({ owner: user._id, volume: 100, playing: false, playlist: [] });\n  return user;\n});\n"]}